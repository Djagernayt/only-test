import './styles/globals.scss';
import Timeline from './components/Timeline';
import { timelineData, defaultConfig } from './data/timeline-data';
import { TimelineConfig } from './types/timeline.types';

class App {
  private timeline: Timeline | null = null;

  constructor() {
    this.init();
  }

  private init(): void {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', this.onDOMContentLoaded.bind(this));
    } else {
      this.onDOMContentLoaded();
    }
  }

  private onDOMContentLoaded(): void {
    const appContainer = document.getElementById('app');
    
    if (!appContainer) {
      console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #app –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    this.initializeTimeline(appContainer);
    this.setupMultipleInstancesDemo();
    this.setupErrorHandling();
  }

  private initializeTimeline(container: HTMLElement): void {
    try {
      const config: Partial<TimelineConfig> = {
        ...defaultConfig,
        periods: timelineData,
        enableKeyboardNavigation: true
      };

      this.timeline = new Timeline(container, config);
      console.log('Timeline —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Timeline:', error);
      this.showErrorMessage(container);
    }
  }

  private setupMultipleInstancesDemo(): void {
    (window as any).createNewTimelineInstance = () => {
      const newContainer = document.createElement('div');
      newContainer.style.marginTop = '2rem';
      document.body.appendChild(newContainer);

      const newTimeline = new Timeline(newContainer, {
        periods: timelineData,
        initialPeriod: 0,
        enableKeyboardNavigation: false
      });

      console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Timeline');
      return newTimeline;
    };

    // console.log('üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: window.createNewTimelineInstance()');
  }

  private setupErrorHandling(): void {
    window.addEventListener('error', (event) => {
      console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
    });

    window.addEventListener('unhandledrejection', (event) => {
      console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', event.reason);
    });
  }

  private showErrorMessage(container: HTMLElement): void {
    container.innerHTML = `
      <div style="
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        text-align: center;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        color: #42567A;
      ">
        <div>
          <h1 style="font-size: 2rem; margin-bottom: 1rem;">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
          <p style="font-size: 1.1rem; margin-bottom: 1rem;">
            –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Timeline
          </p>
          <button 
            onclick="location.reload()" 
            style="
              background: #3877EE;
              color: white;
              border: none;
              padding: 0.75rem 1.5rem;
              border-radius: 6px;
              font-size: 1rem;
              cursor: pointer;
            "
          >
            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      </div>
    `;
  }

  public getTimeline(): Timeline | null {
    return this.timeline;
  }

  public destroy(): void {
    if (this.timeline) {
      this.timeline.destroy();
      this.timeline = null;
    }
  }
}

const app = new App();
export default app;
(window as any).timelineApp = app;

// console.log(`
// üï∞Ô∏è Timeline Project
// ‚îú‚îÄ‚îÄ –í–µ—Ä—Å–∏—è: 1.0.0
// ‚îú‚îÄ‚îÄ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: TypeScript, SCSS, Webpack, Swiper, GSAP
// ‚îú‚îÄ‚îÄ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: window.timelineApp.getTimeline()
// ‚îî‚îÄ‚îÄ API: goToNext(), goToPrev(), goToPeriod(index)

// –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: window.createNewTimelineInstance()
// `);